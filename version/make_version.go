// Copyright 2017, The Moistpetal Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +build ignore

package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"os/exec"
	"strings"
	"time"
)

func main() {

	log.SetPrefix("make_version: ")
	log.SetFlags(0)

	// locate git executable in PATH
	bin, err := exec.LookPath("git")
	if err != nil {
		log.Fatal(err)
	}

	// fetch commit hash
	out, err := exec.Command(bin, "describe", "--always", "--long", "--dirty").Output()
	if err != nil {
		log.Fatal(err)
	}

	// construct output file data
	output := fmt.Sprintf(outputFormat[1:],
		time.Now().UTC().Format(time.RFC3339),
		strings.TrimSpace(string(out)),
	)

	// save data to override file
	if err = ioutil.WriteFile("version_override.go", []byte(output), 0644); err != nil {
		log.Fatal(err)
	}
}

const outputFormat = `
// Code generated by 'go run make_version.go'. DO NOT EDIT.
package version

import (
    "fmt"
    "time"
)

func init() {
    var err error
    CommitSHA = fmt.Sprintf("%%s", %[2]q)
    BuildTime, err = time.Parse(time.RFC3339, %[1]q)
    if err != nil {
        panic(err)
    }
}`
